{"version":3,"file":"DQC1Z7GB.js","sources":["../../../../node_modules/.pnpm/@nuxtjs+mdc@0.8.3/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCSlot.vue","../../../../node_modules/.pnpm/@nuxt+content@2.13.2_nuxt@3.13.2_vue@3.5.9/node_modules/@nuxt/content/dist/runtime/components/ContentSlot.vue"],"sourcesContent":["<script>\nimport { flatUnwrap } from \"../utils/node\";\nimport { defineComponent, getCurrentInstance, useSlots, computed, h } from \"#imports\";\nexport default defineComponent({\n  name: \"MDCSlot\",\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: \"default\"\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * VNode to render\n     * This is only useful for render functions\n     */\n    use: {\n      type: Function,\n      default: void 0\n    }\n  },\n  setup(props) {\n    const { parent } = getCurrentInstance();\n    const { default: fallbackSlot } = useSlots();\n    const tags = computed(() => {\n      if (typeof props.unwrap === \"string\") {\n        return props.unwrap.split(\" \");\n      }\n      return [\"*\"];\n    });\n    return {\n      fallbackSlot,\n      tags,\n      parent\n    };\n  },\n  render({ use, unwrap, fallbackSlot, tags, parent }) {\n    try {\n      let slot = use;\n      if (typeof use === \"string\") {\n        slot = parent?.slots[use] || parent?.parent?.slots[use];\n        console.warn(`Please set :use=\"$slots.${use}\" in <MDCSlot> component to enable reactivity`);\n      }\n      if (!slot) {\n        return fallbackSlot ? fallbackSlot() : h(\"div\");\n      }\n      return unwrap ? flatUnwrap(slot(), tags) : [slot()];\n    } catch (e) {\n      return h(\"div\");\n    }\n  }\n});\n</script>\n","<script>\nimport { defineComponent, h, resolveComponent } from \"vue\";\nexport default defineComponent({\n  props: {\n    /**\n     * A slot name or function\n     */\n    use: {\n      type: Function,\n      default: void 0\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    }\n  },\n  render(props) {\n    return h(resolveComponent(\"MDCSlot\"), props);\n  }\n});\n</script>\n"],"names":["_sfc_main","defineComponent","props","parent","getCurrentInstance","fallbackSlot","useSlots","tags","computed","use","unwrap","slot","_a","flatUnwrap","h","__nuxt_component_0"],"mappings":"gGAGA,MAAKA,EAAaC,EAAa,CAC7B,KAAM,UACN,WAAY,GACZ,MAAO,CACL,KAAM,CACJ,KAAM,OACN,QAAS,SACV,EAKD,OAAQ,CACN,KAAM,CAAC,QAAS,MAAM,EACtB,QAAS,EACV,EAKD,IAAK,CACH,KAAM,SACN,QAAS,MACX,CACD,EACD,MAAMC,EAAO,CACX,KAAM,CAAE,OAAAC,GAAWC,IACb,CAAE,QAASC,GAAiBC,EAAQ,EACpCC,EAAOC,EAAS,IAChB,OAAON,EAAM,QAAW,SACnBA,EAAM,OAAO,MAAM,GAAG,EAExB,CAAC,GAAG,CACZ,EACD,MAAO,CACL,aAAAG,EACA,KAAAE,EACA,OAAAJ,EAEH,EACD,OAAO,CAAE,IAAAM,EAAK,OAAAC,EAAQ,aAAAL,EAAc,KAAAE,EAAM,OAAAJ,GAAU,OAClD,GAAI,CACF,IAAIQ,EAAOF,EAKX,OAJI,OAAOA,GAAQ,WACjBE,GAAOR,GAAA,YAAAA,EAAQ,MAAMM,OAAQG,EAAAT,GAAA,YAAAA,EAAQ,SAAR,YAAAS,EAAgB,MAAMH,IACnD,QAAQ,KAAK,2BAA2BA,CAAG,+CAA+C,GAEvFE,EAGED,EAASG,EAAWF,EAAI,EAAIJ,CAAI,EAAI,CAACI,EAAI,CAAE,EAFzCN,EAAeA,EAAY,EAAKS,EAAE,KAAK,CAGlD,MAAY,CACV,OAAOA,EAAE,KAAK,CAChB,CACF,CACF,CAAC,ECxDId,EAAaC,EAAa,CAC7B,MAAO,CAIL,IAAK,CACH,KAAM,SACN,QAAS,MACV,EAKD,OAAQ,CACN,KAAM,CAAC,QAAS,MAAM,EACtB,QAAS,EACX,CACD,EACD,OAAOC,EAAO,CACZ,OAAOY,EAAEC,EAA6Bb,CAAK,CAC7C,CACF,CAAC","x_google_ignoreList":[0,1]}